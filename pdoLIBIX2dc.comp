/*****************************************************************/
/*
An example component for software slave https://github.com/sirop/ecslave master branch

comp pdoLIBIX2dc.comp

gcc -o pdoLIBIX2dc.o -I.  -D_GNU_SOURCE -D_REENTRANT -DTHREAD_FLAVOR_ID=2 -DRTAPI \
-D_GNU_SOURCE -D_FORTIFY_SOURCE=0 -D__MODULE__ -mieee-fp -I/usr/include/linuxcnc \
-fPIC -g -funwind-tables -Os -c pdoLIBIX2dc.c

gcc -shared -o pdoLIBIX2dc.so -fPIC  pdoLIBIX2dc.o  -Wl,-rpath,/usr/lib -L/usr/lib -llinuxcnchal -lethercat -lrt

In order to avoid any false "error" messages
copy to to the lib dir of the current RT flavour:

sudo cp pdoLIBIX2dc.so /usr/lib/linuxcnc/xenomai  



-----------------------------------

time_end-time_begin on Intel NUC with CeleronÂ® Processor N2930 


*/
/*****************************************************************/








component pdoLIBIX2dc "Ethercat with DC clock";

pin io u32 timeLIBIX = 0; 
pin io u32 timeSlave=0;

// pin out u32 statusWord; 
// pin out s32 actualVelocity; 


option extra_setup;
option extra_cleanup;

//option constructable no;

//function update nofp;
function update nofp;
license "GPL";

;;

//#include "/opt/ethercat/include/ecrt.h"
#include "/usr/include/ecrt.h"

//#include <native/sem.h>
//#include <native/timer.h>



/*****************************************************************************/

// EtherCAT
static ec_master_t *master = NULL;
static ec_domain_t *domain1 = NULL;
static ec_slave_config_t *sc = NULL; // slave config for DC clock
//static RT_SEM  	master_sem;
static unsigned long mutex;
static ec_master_state_t master_status, old_status = {};
unsigned int sync_ref_counter = 0;

// process data
static uint8_t *domain1_pd = NULL;



/* Master 0, Slave 0, "LIBIX ORDER"
 * Vendor ID:       0x00000017
 * Product code:    0x00000004
 * Revision number: 0x00000012
 */

#define LIBIX 0x00000017, 0x00000004


ec_pdo_entry_info_t slave_0_pdo_entries[] = {
    {0x1600, 0x02, 8}, /* RXPDO1 LIBIX */
    {0x1600, 0x01, 32}, /* RXPDO2 LIBIX */
    {0x1a00, 0x02, 32}, /* TXPDO1 LIBIX */
    {0x1a00, 0x01, 16}, /* TXPDO2 LIBIX */
};

ec_pdo_info_t slave_0_pdos[] = {
    {0x1600, 2, slave_0_pdo_entries + 0}, /* LIBIX RX PDO */
    {0x1a00, 2, slave_0_pdo_entries + 2}, /* LIBIX TX PDO */
};

ec_sync_info_t slave_0_syncs[] = {
    {0, EC_DIR_INPUT, 1, slave_0_pdos + 0, EC_WD_DISABLE},
    {1, EC_DIR_OUTPUT, 1, slave_0_pdos + 1, EC_WD_DISABLE},
    {0xff}
};




#define LibixSlavePos1 0, 0

/* Offsets for PDO entries */
static unsigned int off_libix_in[2]={-1};
static unsigned int off_libix_out[2]={-1};

const static ec_pdo_entry_reg_t domain1_pdo_regs[] = {
    {LibixSlavePos1,  LIBIX, 0x1a00, 0x02, &off_libix_out[0], NULL},
    {LibixSlavePos1,  LIBIX, 0x1600, 0x02, &off_libix_in[0], NULL},
    {}
};




/***********************************************************************
*                  LOCAL FUNCTION DECLARATIONS                         *
************************************************************************/




/*****************************************************************************/
EXTRA_SETUP() {


     

    rtapi_print_msg(RTAPI_MSG_INFO,"Starting...\n");
   

    if (!(master = ecrt_request_master(0))) {
	    rtapi_print_msg(RTAPI_MSG_ERR,"Requesting master 0 failed!\n");
        goto out_return;
    }

	
	rtapi_print_msg(RTAPI_MSG_INFO,"Registering domain...\n");
    if (!(domain1 = ecrt_master_create_domain(master))) {
	rtapi_print_msg(RTAPI_MSG_ERR,"Domain creation failed!\n");
       
        goto out_release_master;
    }
    
	/* Configure DC and app time
	   https://github.com/sittner/linuxcnc-ethercat/blob/master/src/lcec_main.c#L465
	*/
    rtapi_print_msg(RTAPI_MSG_INFO,"Registering PDOs...\n");
	if (ecrt_domain_reg_pdo_entry_list(domain1, domain1_pdo_regs)!=0) {
	    rtapi_print_msg(RTAPI_MSG_ERR,"PDO registration failed!\n");
        goto out_release_master;
    }
	
	   // create configuration for reference clock FIXME
       if (!(sc = ecrt_master_slave_config(master, LibixSlavePos1, LIBIX))) {
	       rtapi_print_msg(RTAPI_MSG_ERR,"Obtaining slave config for DC failed!\n");
           goto out_release_master;
       }
	   
	   
	   

	   
	   if (ecrt_slave_config_pdos(sc, EC_END, slave_0_syncs)) {
           rtapi_print_msg(RTAPI_MSG_ERR,"PDO configuration failed!\n");
           goto out_release_master;
       }
	   
	/*rtapi_print_msg(RTAPI_MSG_INFO,"Registering PDOs...\n");
	if (ecrt_domain_reg_pdo_entry_list(domain1, domain1_pdo_regs)!=0) {
	    rtapi_print_msg(RTAPI_MSG_ERR,"PDO registration failed!\n");
        goto out_release_master;
    }*/
  
	   
	 
	
	 // configure SYNC signals for this slave
     ecrt_slave_config_dc(sc, 0x0700, 1000000000, 0, 0, 0);

	rtapi_print_msg(RTAPI_MSG_INFO,"Activating master...\n");
    if (ecrt_master_activate(master)) {
	    rtapi_print_msg(RTAPI_MSG_ERR,"Failed to activate master!\n");
        goto out_release_master;
    }

    /* In userspace context: This method has to be called after ecrt_master_activate()
       to get the mapped domain process data memory. */
    domain1_pd = ecrt_domain_data(domain1);
	if (domain1_pd==NULL){
    	rtapi_print_msg(RTAPI_MSG_ERR,"Domain's process data unavailable.\n");
		goto  out_release_master;
		}
		
	rtapi_print_msg(RTAPI_MSG_INFO,"Offsets in=%d,%d out=%d,%d\n",
	off_libix_in[0], off_libix_in[1],
	off_libix_out[0], off_libix_out[1]);
   
		
	
    rtapi_print_msg(RTAPI_MSG_INFO,"Started.\n");
    return 0;

 out_release_master:
	rtapi_print_msg(RTAPI_MSG_INFO,"Releasing master...\n");
    ecrt_release_master(master);
    master = NULL;
	return -1;
 out_return:
	rtapi_print_msg(RTAPI_MSG_ERR,"Failed to load. Aborting.\n");
    return -1;
}

EXTRA_CLEANUP() {
	
	rtapi_print_msg(RTAPI_MSG_INFO,"Stopping...\n");
	
	rtapi_mutex_give(&mutex);
	if (master) {
		rtapi_print_msg(RTAPI_MSG_INFO,"Releasing master...\n");
		ecrt_release_master(master);
	 //	ecrt_master_deactivate(master);
	}
	
   
	
	rtapi_print_msg(RTAPI_MSG_INFO,"Unloading.\n");
}

/*****************************************************/

/*****************************************************/
FUNCTION(update) { 

	 long long int time_begin = rtapi_get_time();
	 long long int time_mutex ;

   // receive
   /* rtapi_mutex_try()' makes a non-blocking attempt to get the
    mutex pointed to by 'mutex'. */
   //rtapi_mutex_get(&mutex);
   if (rtapi_mutex_try(&mutex) != 0 )
      {
	    time_mutex = rtapi_get_time();
		rtapi_print_msg(RTAPI_MSG_ERR,"MUTEX BLOCKED %d ns \n", time_mutex-time_begin);
		return;
		//goto MUTEX_BLOCKED;
	  }
   ecrt_master_receive(master);
   ecrt_domain_process(domain1);
   rtapi_mutex_give(&mutex);

	
	timeLIBIX = (uint32_t)(rtapi_get_time() - time_begin);
	//domain1_pd[off_libix_out[0]] = timeLIBIX ;
	//EC_WRITE_U32(domain1_pd+off_libix_out[0], timeLIBIX);
	//EC_WRITE_U8(domain1_pd+off_libix_out[1], 0xF);
	
	timeSlave =  EC_READ_U32(domain1_pd+off_libix_in[0]);
	
	EC_WRITE_U32(domain1_pd+ 0, timeLIBIX);
	EC_WRITE_U16(domain1_pd + sizeof(timeLIBIX), 0xABCD);

        //rt_sem_p(&master_sem, TM_INFINITE);
		//rtapi_mutex_get(&mutex);
		if (rtapi_mutex_try(&mutex) !=0 )
          {
	        time_mutex = rtapi_get_time();
			rtapi_print_msg(RTAPI_MSG_ERR,"MUTEX BLOCKED %d ns \n", time_mutex-time_begin);
		    return;
			//goto MUTEX_BLOCKED;
	      }
        ecrt_master_state(master, &master_status);
        //rt_sem_v(&master_sem);
		rtapi_mutex_give(&mutex);

        if (master_status.al_states != old_status.al_states) {
		rtapi_print_msg(RTAPI_MSG_INFO,"bus status changed to %i.\n", master_status.al_states);
        }
        if (master_status.slaves_responding !=
                old_status.slaves_responding) {
			rtapi_print_msg(RTAPI_MSG_INFO,"slaves_responding changed to %u.\n", master_status.slaves_responding);
        }

        old_status = master_status;


    	// send
		//rtapi_mutex_get(&mutex);
		if (rtapi_mutex_try(&mutex)!= 0)
          {
	        time_mutex = rtapi_get_time();
			rtapi_print_msg(RTAPI_MSG_ERR,"MUTEX BLOCKED %d ns \n", time_mutex-time_begin);
		    return;
			//goto MUTEX_BLOCKED;
	      }
		long long int time_epoch_ns = rtapi_get_time();
        
		uint64_t ec_time_ns=(time_epoch_ns/1000000000ULL- 946684800ULL)* 1000000000ULL+(time_epoch_ns-(time_epoch_ns/1000000000ULL)*1000000000ULL);
		ecrt_master_application_time(master, ec_time_ns);
  
        if (sync_ref_counter>0) {
              sync_ref_counter--;
           } else {
               sync_ref_counter = 4;
               ecrt_master_sync_reference_clock(master);
          }
        ecrt_master_sync_slave_clocks(master);
    	ecrt_domain_queue(domain1);
       	ecrt_master_send(master);
	    rtapi_mutex_give(&mutex);
		
		long long int time_end = rtapi_get_time();
		rtapi_print_msg(RTAPI_MSG_INFO,"Cycle %d ns.\n", time_end-time_begin);
	
}